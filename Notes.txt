---

# React Project Notes (for Tulu Nadu Website)

## 📂 Project Structure

```
tulunadu.github.io/
│── index.html
│── package.json
│── vite.config.js
│── /public
│── /src
│    │── App.jsx
│    │── main.jsx
│    │── index.css
│    │── /components
│    │── /assets
```

---

## 📌 Important Files

### 1. `index.html`

* Root HTML file (public entry).
* Mostly untouched except:

  * Change `<title>` → `"Tulu Nadu Culture"`.
  * Add meta tags (SEO, description).

---

### 2. `main.jsx`

* Entry point for React.
* Connects `App.jsx` to `index.html`.

```jsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
)
```

---

### 3. `App.jsx`

* Main file for app layout (homepage).
* Example:

```jsx
function App() {
  return (
    <div>
      <h1>Welcome to Tulu Nadu Culture</h1>
      <p>Explore Tulu language, cuisine, traditions, and more.</p>
    </div>
  )
}
export default App
```

---

### 4. `/components/` Folder

* Break site into sections:

  * `Header.jsx`
  * `Footer.jsx`
  * `Language.jsx`
  * `Culture.jsx`
  * `Cuisine.jsx`
  * `Gallery.jsx`
* Components = reusable building blocks.

---

### 5. `index.css`

* Global styles (fonts, colors, layout).
* Can also make separate CSS files per component.

---

### 6. `/assets/`

* Store images, icons, logos.
* Example:

  * `assets/kambala.jpg`
  * `assets/kori_rotti.png`

---

## ⚡ Dev vs Build

* `npm run dev` → Start development server (live preview).
* `npm run build` → Create production-ready optimized site in `/dist`.
* `npm run preview` → Preview the production build locally.

---

## 📂 `/dist` Folder

* Generated after `npm run build`.
* Contains optimized files for deployment.
* Example:

```
dist/
  index.html
  assets/
    index-83hsd2.js
    style-3acbd9.css
    logo-9s8d7f.png
```

✅ `/src` = developer code
✅ `/dist` = production code (deploy this!)

---

## ✅ Workflow

1. Edit files in `/src` (mostly `App.jsx` + components).
2. Run `npm run dev` while developing.
3. Run `npm run build` when ready to deploy.
4. Deploy contents of `/dist` to GitHub Pages or hosting.

---




Deployment: 

---

# 🌐 Hosting React + Vite App on GitHub Pages

## 📌 Pre-requisites

* A GitHub repo created (example: `tulunadu.github.io`).
* Code pushed to GitHub.
* Node.js and npm installed.

---

## 📂 Steps to Deploy

### 1. Install GitHub Pages Plugin

```bash
npm install gh-pages --save-dev
```

---

### 2. Update `vite.config.js`

Add a `base` property with your repo name:

```js
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  base: '/tulunadu.github.io/',   // 👈 repo name here
})
```

⚠️ If your repo is `username.github.io`, then:

```js
base: '/'
```

---

### 3. Update `package.json`

Add deploy scripts:

```json
"scripts": {
  "dev": "vite",
  "build": "vite build",
  "preview": "vite preview",
  "predeploy": "npm run build",
  "deploy": "gh-pages -d dist"
}
```

---

### 4. Build and Deploy

Run:

```bash
npm run deploy
```

This will:

1. Run `npm run build` → generate `/dist`.
2. Push `/dist` to the `gh-pages` branch.

---

### 5. Enable GitHub Pages

* Go to **GitHub → Settings → Pages**.
* Under "Source", select **Branch: `gh-pages`**.
* Save.
* Your site will be live at:
  👉 `https://<username>.github.io/tulunadu.github.io/`

---

## 🔄 Updating the Site

Each time you make changes:

```bash
npm run deploy
```

---


